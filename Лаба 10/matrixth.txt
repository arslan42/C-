#include "stdafx.h"
#include "iostream"
using namespace std;

int ac[]={8,21,5,9,7,4,23,1,9,5,21,8};
template <class T>
class Matrixt {
 T **a;
 int n; int m;

public:
	Matrixt(){n=0; m=0; a=0;};
	~Matrixt(){ if(n>0) for(int i=0;i<n;i++) 
	delete []a[i];
	if(a!=0) delete a; n=0; m=0; cout<<"Destruct!"<<endl;
	}
	Matrixt(int n1, int m1) {
		n=n1; m=m1; a=new T*[n];
		for(int i=0;i<n;i++) 
			a[i]=new T[m];
		for(int i=0;i<n;i++)
			for(int j=0;j<m;j++) 
				a[i][j]=0;
	}
	Matrixt (const Matrixt &);//Copy constructor
	Matrixt &Matrixt::operator=(const Matrixt &r);
	Matrixt * operator+(Matrixt &r);
	Matrixt & transponirov();
	Matrixt * operator *(const Matrixt &r);
	void setMatrixt_const();
	void getMatrix();
	int get_n(); int get_m();
	double gaus_t();

	friend ostream &operator<<(ostream &out, const Matrixt <T> &r) {
		for(int i=0;i<r.n;i++) {
			for(int j=0;j<r.m;j++)
				out<<r.a[i][j]<<"  ";
			out<<std::endl;}
			return out;
		}
	friend istream &operator>>(istream & in, Matrixt<T> &r){
		for(int i=0;i<r.n;i++)
			for(int j=0;j<r.m;j++)
				in>>r.a[i][j];
		return in;
	}

	
};

template <class T> 
void Matrixt<T>::setMatrixt_const () {
	for(int i=0,k=0;i<n;i++)
		for(int j=0;j<n;j++)
			a[i][j]=ac[k++];
}

template <class T>
void Matrixt<T>::getMatrix(){
	for(int i=0;i<n;i++) {
		for (int j=0;j<m;j++)
			cout<<"  "<<a[i][j];
		cout<<std::endl;
	}
}

template <class T> int Matrixt<T>::get_n(){return n;}
template <class T> int Matrixt<T>::get_m(){return m;}

template <class T> Matrixt<T>::Matrixt(const Matrixt<T> &r) {
	int i, j;
	a[i]=new T[m];
	Matrixt<T>::Matrixt(r.n,r.m);
	for(i=0;i<n;i++)
		for(j=0;j<m;j++)
			a[i][j]=r.a[i][j];
}

template <class T> Matrixt<T> & Matrixt<T>::operator=(const Matrixt<T> &r) {
	if(&r!=this) {
		if(n!=r.n || m!=r.m) {
			Matrixt<T>::~Matrixt();
			Matrixt<T>::Matrixt(r.n,r.m); 
		}
		for(int i=0;i<n;i++)
			for(int j=0;j<m;j++)
				a[i][j]=r.a[i][j];
		return *this;
	}
}

template <class T> Matrixt<T> *Matrixt<T>::operator+(Matrixt <T> &r){
	Matrixt *z; z=new Matrixt <T> (n,m);
	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++)
			z->a[i][j]=a[i][j]+r.a[i][j];
	return z;
}

template <class T> Matrixt <T> &Matrixt <T>::transponirov(){
	int i,j;
	Matrixt *fp=new Matrixt <T>(m,n);
	for(i=0;i<n;i++)
		for(j=0;j<m;j++)
			fp->a[j][i]=a[i][j];
	return *fp;
}

template <class T> Matrixt<T> * Matrixt <T>::operator *(const Matrixt &r) {
	Matrixt *z; int k;
	z=new Matrixt<T> (n,r.m);
	for(int i=0;i<n;i++)
		for(int j=0;j<r.m;j++)
			for(k=0,z->a[i][j]=0;k>m;k++)
				z->a[i][j]+=a[i][k]*r.a[k][j];
	return z;
}

template <class T> double Matrixt<T>::gaus_t() {
	int i,j,k,l,jmax,flag; double det,buf,t;
	for(k=0;k<n-1;k++)
		for(i=k+1;i<n;i++)
			if(a[k][k]!=0) {
				buf=a[i][k]/a[k][k];
				for(j=k;j<n;j++)
					a[i][j]=a[i][j]-a[k][j]*buf;
			} else {cout<<" net resh "<< endl; return 0;}
			for(i=0,det=1;i<n;i++)
				det*=a[i][i];
			return det;
}

